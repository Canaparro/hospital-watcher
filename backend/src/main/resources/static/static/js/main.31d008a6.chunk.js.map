{"version":3,"sources":["api.js","components/results/Results.jsx","components/search/Search.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["axios","require","default","reportClient","create","baseURL","getReports","callback","state","city","hospital","params","get","then","response","data","catch","error","console","log","geoLocationClient","Results","props","listItems","results","map","item","className","hospitalName","icuSARSBeds","occupiedIcuSARSBeds","discharges","deaths","lastModificationDate","id","Search","useState","setResult","setState","setCity","setHospital","useEffect","api","type","name","value","onChange","event","target","onClick","App","location","setLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","principalSubdivision","coords","getGeolocation","alert","message","timeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31d008a6.chunk.js","sourcesContent":["const axios = require('axios').default;\n\nconst reportClient = axios.create({\n    baseURL: 'http://localhost:8080/api/v1'\n})\n\nexport function getReports (callback, state, city, hospital) {\n    let params = {\n        state,\n        city,\n        hospital\n    }\n    reportClient.get('/bedreports', {\n        params\n    })\n    .then(function (response) {\n        return callback(response.data)\n    })\n    .catch(function (error) {\n        console.log(error)\n    })\n    .then(function () {\n        console.log('report search called')\n    })\n}\n\nconst geoLocationClient = axios.create({\n    baseURL: 'https://api.bigdatacloud.net/data/reverse-geocode-client'\n})\n\nexport function getLocation (callback, latitude, longitude) {\n    let params = {latitude, longitude}\n    geoLocationClient.get('/', {\n        params\n    }).then(function(response) {\n        let {city, principalSubdivision} = response.data\n        return callback({city, state: principalSubdivision})\n    }).then(function(error) {\n        console.log(error)\n    }).then(function(){\n        console.log('geolocation called')\n    })\n}\n\n//localityLanguage=en\n    ","import './Results.css'\n\nexport default function Results(props) {\n\n    const listItems = props.results.map(\n        (item) => {\n        return <li className=\"result\" key={item.id}>\n            <div>Estado: {item.state}</div>\n            <div>Município: {item.city}</div>\n            <div>Hospital: {item.hospitalName}</div>\n            <div>Leitos de UTI COVID: {item.icuSARSBeds}</div>\n            <div>Leitos ocupados: {item.occupiedIcuSARSBeds}</div>\n            <div>Altas: {item.discharges}</div>\n            <div>Mortes: {item.deaths}</div>\n            <div>Data atualização: {item.lastModificationDate}</div>\n        </li>}\n    )\n\n    return (\n        <div>\n            {listItems}\n        </div>\n    )\n}\n/*\nid\t\"2017016\"\nstate\t\"Amazonas\"\nstateAcronym\t\"AM\"\ncity\t\"Humaitá\"\nhospitalNationalId\t\"2017016\"\nhospitalName\t\"HOSPITAL DR LUIZA DA CONCEICAO FERNANDES\"\nlastModificationDate\t\"2020-11-26T04:00:11.195\"\nrespirators\t1\nclinicalBeds\t46\nicuBeds\t0\nclinicalSARSBeds\t0\nicuSARSBeds\t0\noccupiedClinicalBeds\t0\noccupiedIcuBeds\t0\noccupiedClinicalSARSBeds\t5\noccupiedIcuSARSBeds\t0\ndischarges\t2\ndeaths\t0\n*/","import React, { useState, useEffect } from 'react';\nimport * as api from '../../api'\nimport Results from '../results/Results'\nimport './Search.css'\n\nfunction Search(props) {\n\n    const [results, setResult] = useState([])\n    const [state, setState] = useState()\n    const [city, setCity] = useState()\n    const [hospital, setHospital] = useState()\n\n    useEffect((city, state) => {\n        setState(props.state)\n        setCity(props.city)\n        api.getReports(setResult, state, city, null)\n      }, [props.city, props.state])\n\n    return (\n        <div className='search-grouper'>\n            <label>Estado<input type=\"text\" name=\"state\" value={state} onChange={(event) => setState(event.target.value)}/></label>\n            <label>Município<input type=\"text\" name=\"city\" value={city} onChange={(event) => setCity(event.target.value)}/></label>\n            <label>Hospital<input type=\"text\" name=\"hospital\" value={hospital} onChange={(event) => setHospital(event.target.value)}/></label>\n            <button onClick={() => {api.getReports(setResult, state, city, hospital)}}>Buscar</button>\n            <div>\n                <Results results={results}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Search","import './App.css'\nimport Search from './components/search/Search'\nimport * as api from './api'\nimport React, { useState, useEffect } from 'react'\n\nfunction App() {\n\n  const [location, setLocation] = useState(\"\")\n  \n  useEffect(() => {\n    function getLocation() {\n      if(navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          getGeolocation(position);\n      }, (error) => alert(error.message)\n      , { timeout:2000 });\n      }\n    }\n  \n    function getGeolocation(position) {\n      api.getLocation(setLocation, position.coords.latitude, position.coords.longitude)\n    }\n  \n    getLocation()  \n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Hospital Watcher</h1>\n        <p>\n          Este é um site para buscar informações de ocupação de leitos em hospitais. \n          A informação provida é de responsabilidade do governo.\n        </p>\n      </header>\n      <Search city={location.city} state={location.state}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}